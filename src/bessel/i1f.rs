/*
 * // Copyright (c) Radzivon Bartoshyk 7/2025. All rights reserved.
 * //
 * // Redistribution and use in source and binary forms, with or without modification,
 * // are permitted provided that the following conditions are met:
 * //
 * // 1.  Redistributions of source code must retain the above copyright notice, this
 * // list of conditions and the following disclaimer.
 * //
 * // 2.  Redistributions in binary form must reproduce the above copyright notice,
 * // this list of conditions and the following disclaimer in the documentation
 * // and/or other materials provided with the distribution.
 * //
 * // 3.  Neither the name of the copyright holder nor the names of its
 * // contributors may be used to endorse or promote products derived from
 * // this software without specific prior written permission.
 * //
 * // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
use crate::bessel::j0f::j1f_rsqrt;
use crate::common::f_fmla;
use crate::f_exp;
use crate::polyeval::{f_polyeval13, f_polyeval18};

/// Modified bessel of the first kind order 1
///
/// Max ULP 0.5
pub fn f_i1f(x: f32) -> f32 {
    if !x.is_normal() {
        if x == 0. {
            return 0.;
        }
        if x.is_infinite() {
            return if x.is_sign_positive() {
                f32::INFINITY
            } else {
                f32::NEG_INFINITY
            };
        }
        if x.is_nan() {
            return f32::NAN;
        }
    }

    let xb = x.to_bits() & 0x7fff_ffff;

    if xb > 0x42b7d001 {
        // 91.906261
        return if x.is_sign_negative() {
            f32::NEG_INFINITY
        } else {
            f32::INFINITY
        };
    }

    static SIGN: [f64; 2] = [1., -1.];

    let sign_scale = SIGN[x.is_sign_negative() as usize];

    if xb <= 0x40f80000u32 {
        return i1f_small(f32::from_bits(xb), sign_scale);
    }

    i1f_asympt(f32::from_bits(xb), sign_scale)
}

/**
Computes
I1(x) = x/2 * (1 + 1 * (x/2)^2 + (x/2)^4 * P((x/2)^2))

Original series for Sollya generated in SageMath:

```python
from sage.all import *
from mpmath import mp, besseli, taylor

mp.prec = 500

def refined_approx(x):
    if x == 0:
        return 0
    p1 = besseli(1, x) / x * 2 - mp.mpf(1)
    x_over_two = mp.mpf(x) / 2
    x_over_two_sqr = x_over_two * x_over_two
    p2 = x_over_two_sqr * mp.mpf(0.5)
    p1 = p1 - p2
    x_over_two_p4 = x_over_two_sqr * x_over_two_sqr
    p1 = p1
    return p1

terms = 70

coeffs = taylor(lambda x: refined_approx(x), mp.mpf('0'), terms)

# Step 3: Build series in terms of y = (x/2)^2
R = PolynomialRing(RealField(450), 'y')
y = R.gen()
f = R(0)

for n in range(2, terms, 2):
    k = n // 2
    c = RealField(450)(coeffs[n])
    if n >= 1:
        f += R(c) * y**(k-1) * (4**k)
    else:
        f += R(c) * y**(k-1) * (4**k)

print(f)
```

See ./notes/bessel_sollya/bessel_i1f_small.sollya for generation.

Poly relative err 2^(-53.034)
**/
#[inline]
fn i1f_small(x: f32, sign_scale: f64) -> f32 {
    let dx = x as f64;
    let x_over_two = dx * 0.5;
    let x_over_two_sqr = x_over_two * x_over_two;
    let x_over_two_p4 = x_over_two_sqr * x_over_two_sqr;

    let p = f_polyeval13(
        x_over_two_sqr,
        f64::from_bits(0x3fb5555555555555),
        f64::from_bits(0x3f7c71c71c71c726),
        f64::from_bits(0x3f36c16c16c16fe2),
        f64::from_bits(0x3ee845c8a0cd0c8a),
        f64::from_bits(0x3e927e4fb7a0f415),
        f64::from_bits(0x3e3522a43a032050),
        f64::from_bits(0x3dd2c975fe286765),
        f64::from_bits(0x3d6ab812b3d0d0dc),
        f64::from_bits(0x3cff184397bf786a),
        f64::from_bits(0x3c8e1bb6f0093743),
        f64::from_bits(0x3c1912f65691487f),
        f64::from_bits(0x3b9f4f99d21b4e80),
        f64::from_bits(0x3b2f5839767d3d8a),
    );

    let p1 = f_fmla(0.5, x_over_two_sqr, 1.);
    let p2 = f_fmla(x_over_two_p4, p, p1);
    (p2 * x_over_two * sign_scale) as f32
}

/**
Asymptotic expansion for I1.

Computes:
sqrt(x) * exp(-x) * I1(x) = Pn(1/x)/Qn(1/x)
hence:
I1(x) = Pn(1/x)/Qm(1/x)*exp(x)/sqrt(x)

Generated by Sollya:
```python
bessel_i1_approximant_big = library("./cmake-build-release/libbessel_sollya.dylib");

prec = 1000;

f = bessel_i1_approximant_big(1/x);
d = [1/91.9, 1/7.75];
w = 1;
pf = remez(f, 17, d, 1, 1e-25);

for i from 0 to degree(pf) do {
    print("'", coeff(pf, i), "',");
};
```
See ./notes/bessel_sollya/bessel_i1f_big.sollya
**/
#[inline]
fn i1f_asympt(x: f32, sign_scale: f64) -> f32 {
    let dx = x as f64;
    let recip = 1. / dx;
    let z = f_polyeval18(
        recip,
        f64::from_bits(0x3fd9884533d3fefb),
        f64::from_bits(0xbfc32633e6f04c07),
        f64::from_bits(0xbfa7efbd9339dbec),
        f64::from_bits(0xbfa4f50483292d0d),
        f64::from_bits(0xbfabd6c40f26d56c),
        f64::from_bits(0xbfd75e0c42b8510b),
        f64::from_bits(0x402bb673b6c33ea8),
        f64::from_bits(0xc081af3eb849ccd5),
        f64::from_bits(0x40d0529017219ddd),
        f64::from_bits(0xc116a4e717bba81b),
        f64::from_bits(0x4157b2ce08d78682),
        f64::from_bits(0xc192aea4b7182d7e),
        f64::from_bits(0x41c5f91bbf503ff9),
        f64::from_bits(0xc1f2e92f51accac0),
        f64::from_bits(0x42170a6cbf88693f),
        f64::from_bits(0xc232c383c9e4e16e),
        f64::from_bits(0x42424a8e383877cc),
        f64::from_bits(0xc240207b5540b4e8),
    );
    let e = f_exp(dx);
    let r_sqrt = j1f_rsqrt(dx);
    (z * r_sqrt * e * sign_scale) as f32
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_i1f() {
        assert!(f_i1f(f32::NAN).is_nan());
        assert!(f_i1f(f32::INFINITY).is_infinite());
        assert!(f_i1f(f32::NEG_INFINITY).is_infinite());
        assert_eq!(f_i1f(0.), 0.);
        assert_eq!(f_i1f(1.), 0.5651591);
        assert_eq!(f_i1f(-1.), -0.5651591);
        assert_eq!(f_i1f(9.), 1030.9147);
        assert_eq!(f_i1f(-9.), -1030.9147);
    }
}
