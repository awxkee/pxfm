/*
 * // Copyright (c) Radzivon Bartoshyk 7/2025. All rights reserved.
 * //
 * // Redistribution and use in source and binary forms, with or without modification,
 * // are permitted provided that the following conditions are met:
 * //
 * // 1.  Redistributions of source code must retain the above copyright notice, this
 * // list of conditions and the following disclaimer.
 * //
 * // 2.  Redistributions in binary form must reproduce the above copyright notice,
 * // this list of conditions and the following disclaimer in the documentation
 * // and/or other materials provided with the distribution.
 * //
 * // 3.  Neither the name of the copyright holder nor the names of its
 * // contributors may be used to endorse or promote products derived from
 * // this software without specific prior written permission.
 * //
 * // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
use crate::bessel::j0f::j1f_rsqrt;
use crate::f_exp;
use crate::polyeval::{f_polyeval14, f_polyeval18};

/// Modified bessel of the first kind of order 0
///
/// Max ULP 0.5
pub fn f_i0f(x: f32) -> f32 {
    if !x.is_normal() {
        if x == 0. {
            return 1.;
        }
        if x.is_infinite() {
            return f32::INFINITY;
        }
        if x.is_nan() {
            return f32::NAN;
        }
    }

    let xb = x.to_bits() & 0x7fff_ffff;

    if xb >= 0x42b7cd32 {
        return f32::INFINITY;
    }

    if xb < 0x40f00000u32 {
        // 7.5
        return i0f_0_to_7p5(f32::from_bits(xb));
    }

    i0f_asympt(f32::from_bits(xb))
}

/**
Computes I0 on interval [-7.5; 7.5]
as rational approximation I0 = 1 + (x/2)^2 * Pn((x/2)^2)/Qm((x/2)^2))
where n = 16 and m = 0.

Relative error on interval 2^-(44.37).

Generated by SageMath:
```python
from sage.all import *
from mpmath import mp, besseli, taylor

mp.prec = 450

# Step 1: Define I0(x) - 1
def shifted_i0(x):
    return besseli(0, x) - mp.mpf(1)

# Series of I0(x) - 1 in terms of (x/2)^2
terms = 80
from mpmath import taylor
coeffs = taylor(shifted_i0, 0, terms)

# Build series in terms of y = (x/2)^2
R = PolynomialRing(RealField(450), 'y')
y = R.gen()
f = R(0)

for n in range(2, terms, 2):
    k = n // 2
    c = RealField(450)(coeffs[n])
    if n >= 1:
        f += R(c) * y**(k-1) * (4**k)
    else:
        f += R(c) * y**(k-1) * (4**k)

print(f)
```

See ./notes/bessel_i0f.ipynb for generation

Next step is poly generation in Sollya see ./notes/bessel_sollya/bessel_i0f_small.sollya for generation

Poly relative error: 2^(-63.317)
**/
#[inline]
fn i0f_0_to_7p5(x: f32) -> f32 {
    let dx = x as f64;
    const C: f64 = 1. / 4.;
    let eval_x = dx * dx * C;

    let z = f_polyeval14(
        eval_x,
        f64::from_bits(0x3ff0000000000000),
        f64::from_bits(0x3fd0000000000007),
        f64::from_bits(0x3f9c71c71c71c435),
        f64::from_bits(0x3f5c71c71c72312b),
        f64::from_bits(0x3f12345678933d96),
        f64::from_bits(0x3ec02e85c1273d45),
        f64::from_bits(0x3e6522a42ef700e9),
        f64::from_bits(0x3e0522a563e282c4),
        f64::from_bits(0x3da0b3052f9a8ff0),
        f64::from_bits(0x3d35610633221750),
        f64::from_bits(0x3cc691b84e96baba),
        f64::from_bits(0x3c5470d43f68d9db),
        f64::from_bits(0x3bdaf3edac8ca37f),
        f64::from_bits(0x3b6e04dc319563b2),
    ) * eval_x;

    (1. + z) as f32
}

/**
Asymptotic expansion for I0.

Computes:
sqrt(x) * exp(-x) * I0(x) = Pn(1/x)/Qn(1/x)
hence:
I0(x) = Pn(1/x)/Qm(1/x)*exp(x)/sqrt(x)

Generated by Sollya:
```python
bessel_i0_approximant = library("./cmake-build-release/libbessel_sollya.dylib");

prec = 1000;

f = bessel_i0_approximant(1/x);
d = [1/92.3, 1/7.5];
w = 1;
pf = remez(f, 17, d, 1, 1e-25);

for i from 0 to degree(pf) do {
    print("'", coeff(pf, i), "',");
};
```
See ./notes/bessel_sollya
**/
#[inline]
fn i0f_asympt(x: f32) -> f32 {
    let dx = x as f64;
    let recip = 1. / dx;
    let z = f_polyeval18(
        recip,
        f64::from_bits(0x3fd9884533d7bdf0),
        f64::from_bits(0x3fa988450480681e),
        f64::from_bits(0x3f9cb9935a83bdfa),
        f64::from_bits(0x3f9dce240c782a0b),
        f64::from_bits(0x3faaf420c2b2114b),
        f64::from_bits(0xbfd21fd2ffa7e0ce),
        f64::from_bits(0x40288db49b55c466),
        f64::from_bits(0xc06fa9587710368e),
        f64::from_bits(0x40a6174f60a4821e),
        f64::from_bits(0x40c886513808dd10),
        f64::from_bits(0xc1317b06d4818829),
        f64::from_bits(0x417645b01d028e80),
        f64::from_bits(0xc1b0e4c8bf8572f4),
        f64::from_bits(0x41e10579ce390d79),
        f64::from_bits(0xc207041e40465d8a),
        f64::from_bits(0x42241e84880c4f4c),
        f64::from_bits(0xc2349613f0001396),
        f64::from_bits(0x4232c15e22fb5d98),
    );
    let e = f_exp(dx);
    let r_sqrt = j1f_rsqrt(dx);
    (z * r_sqrt * e) as f32
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_i0() {
        assert!(f_i0f(f32::NAN).is_nan());
        assert_eq!(f_i0f(f32::NEG_INFINITY), f32::INFINITY);
        assert_eq!(f_i0f(f32::INFINITY), f32::INFINITY);
        assert_eq!(f_i0f(1.), 1.2660658);
        assert_eq!(f_i0f(5.), 27.239872);
        assert_eq!(f_i0f(16.), 893446.25);
        assert_eq!(f_i0f(32.), 5590908000000.0);
        assert_eq!(f_i0f(92.0), f32::INFINITY);
        assert_eq!(f_i0f(0.), 1.0);
        assert_eq!(f_i0f(28.), 109534600000.0);
        assert_eq!(f_i0f(-28.), 109534600000.0);
    }
}
