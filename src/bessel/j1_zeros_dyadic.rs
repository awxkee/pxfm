/*
 * // Copyright (c) Radzivon Bartoshyk 8/2025. All rights reserved.
 * //
 * // Redistribution and use in source and binary forms, with or without modification,
 * // are permitted provided that the following conditions are met:
 * //
 * // 1.  Redistributions of source code must retain the above copyright notice, this
 * // list of conditions and the following disclaimer.
 * //
 * // 2.  Redistributions in binary form must reproduce the above copyright notice,
 * // this list of conditions and the following disclaimer in the documentation
 * // and/or other materials provided with the distribution.
 * //
 * // 3.  Neither the name of the copyright holder nor the names of its
 * // contributors may be used to endorse or promote products derived from
 * // this software without specific prior written permission.
 * //
 * // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
use crate::dyadic_float::{DyadicFloat128, DyadicSign};

/**
J1 zeros and extremums.

Generated by Sage:
```python
mp.prec = 200

step = mpf("0.01")
epsilon = mpf("1e-35")
x = mpf("0.0")

def j1_prime(x):
    return diff(lambda t: besselj(1, t), x)

previous_zero = R120(0)
j1_zeros = []

while x < mpf("76.0"):
    f1 = besselj(1, x)
    f2 = besselj(1, x + step)
    if f1 * f2 < 0:
        zero = findroot(lambda t: j1(t), (x, x + step), solver='bisect', tol=mp.mpf("1e-41"))
        previous_zero = zero
        j1_zeros.append(zero)
    if previous_zero is not None and abs(x - mpf(f'{round(x)}')) < epsilon:
        zeros.append(previous_zero)
    x += step

j1_extrema = []

x = mpf("0.0")
while x < mpf("76.0"):
    d1 = mp.diff(lambda t: j1(t), x)
    d2 = mp.diff(lambda t: j1(t), x + step)
    if d1 * d2 < 0:
        extremum = findroot(lambda t: mp.diff(lambda u: j1(u), t), (x, x + step), solver='bisect', tol=mp.mpf("1e-41"))
        j1_extrema.append(extremum)
    x += step

# Print results
for i, z in enumerate(j1_zeros):
    print(f"Zero {i+1}: x ≈ {z}")

print("Extrema (peaks/valleys) of J1(x):")
for e in j1_extrema:
    print(f"nExtrema: {e}")

j1_zeros.extend(j1_extrema)

j1_zeros = sorted(j1_zeros)

# Print results
for i, z in enumerate(j1_zeros):
    print(f"Peak or zero {i+1}: x ≈ {z}")

print("")

print("pub(crate) static J1_ZEROS: [DyadicFloat128; 48] = [")
print(f"DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: 0,
        mantissa: 0x0u128,
    },")
for z in j1_zeros:
    print_dyadic(z)

print("];")
```
**/
pub(crate) static J1_ZEROS_RATIONAL: [DyadicFloat128; 48] = [
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: 0,
        mantissa: 0x0u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -127,
        mantissa: 0xebabe8ff_6451d02c_2db0419f_b5cccccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -126,
        mantissa: 0xf53aabad_7b78453f_d54ac5c9_b53851ec_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -125,
        mantissa: 0xaa9b2de0_1923395c_646a75d7_53970a3d_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -125,
        mantissa: 0xe07faf9d_a3927f26_ec9316de_3ec51eb8_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -124,
        mantissa: 0x8894c078_5c45074e_0f409efa_e71ae148_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -124,
        mantissa: 0xa2c68685_efe14a04_c214a2ac_56c8f5c3_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -124,
        mantissa: 0xbb4bcbcb_f72d6335_09a74bfd_b831eb85_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -124,
        mantissa: 0xd52dd798_872d112b_ce7fd18e_69347ae1_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -124,
        mantissa: 0xedd14250_bd62c52d_9a8cf1ed_61feb852_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0x83c3d9b0_2846245a_b2e2eea9_9d166666_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0x901fcd12_732937bf_7425352a_c91f5c29_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0x9ced473a_0b651dbc_f9fcd02c_2f41eb85_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xa950a125_0d4fd3d5_5fd5f1d8_35e851ec_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xb614a71e_a6c55ee4_0cc50107_70eeb852_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xc27d98ef_70b1a769_44625798_3a3ccccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xcf3ab86e_7508311a_2686480d_8820a3d7_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xdba80a21_3a8a6a17_bdc4e527_af21eb85_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xe85fe7a3_8fe65f5e_98e309b4_482ae148_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -123,
        mantissa: 0xf4d0bcfd_d29950ed_24e160a1_a41f5c29_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0x80c23b73_595f7e41_c5e32f99_499dc28f_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0x86fc175e_aa718d29_fe7db0c2_1ec6147b_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0x8d54486e_2f4bdc54_08801f75_f300f5c3_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0x938f58dc_0218717d_864bbf17_a30b3333_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0x99e6291e_ae5b48cf_57f65065_27e4cccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xa0223f28_6d8c1d46_26a79fea_cbe0f5c3_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xa677e78b_9a5b10a4_4deaab72_884e6666_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xacb4de39_388419d0_fd96f29c_211bd70a_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xb3098aeb_5899fa9e_e2de62f3_b20428f6_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xb9474495_447e45d4_e9138245_e303851f_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xbf9b1890_1456ac18_d5eaf7a4_90e1999a_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xc5d97d10_1bef1b2e_cad77847_2dc75c29_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xcc2c947c_b6a8f30b_af7b6617_5e28a3d7_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xd26b8fe5_ab7c5d1c_0f53ea6c_1d04cccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xd8be01c6_100c627a_83c08395_4d08a3d7_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xdefd8375_bc854e19_2fb8e927_2df947ae_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xe54f62d4_119259a1_39ce2cd0_8ac4cccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xeb8f5cc3_417838c5_ae63da28_0e0dc28f_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xf1e0b98e_b278efbb_46443469_ac7b3333_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xf8211fcc_da5a984e_66ff290c_00880000_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -122,
        mantissa: 0xfe72077d_88ab71fd_1ee82863_58a1999a_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x825967e5_d8426804_01982d45_40bc51ec_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x8581a6ef_3ada11d3_cacfc720_4188cccd_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x88a237b0_78a2c052_e1df53db_64035c29_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x8bca46db_1b3ade19_96cfb401_8b840000_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x8eeb005b_a1d4db5a_4194eb14_e29ee148_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x9212e3ee_566fb31d_695296c7_26c35c29_u128,
    },
    DyadicFloat128 {
        sign: DyadicSign::Pos,
        exponent: -121,
        mantissa: 0x9533c2cd_e320ecbc_d2eda12f_8f5d999a_u128,
    },
];
